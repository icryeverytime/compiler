package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Int, Punto, Cadena, If, Else, Do, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Coma, Multi_comentario_a, Multi_comentario_b, Identificador,
    Numero, Program, Bool,Fi ,Then, Until, Write, Read, Comentarios, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, Operador;

start with INICIO;

INICIO ::= 
    Program Llave_a SENTENCIA Llave_c |
    Program Llave_a Llave_c |
    Program Llave_a SENTENCIA Llave_c INICIO |
    Program Llave_a Llave_c INICIO
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR 
    
    

;
DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    Int Identificador Coma Identificador P_coma|
    Int Identificador Identificador P_coma|
    Read Identificador P_coma | 
    Read Identificador Op_atribucion Numero P_coma |
    Read Identificador Igual Numero P_coma |
  
    Read Identificador Op_incremento P_coma | 
    Read Op_incremento Identificador P_coma | 

    Write Identificador P_coma | 
    Write Identificador Op_atribucion Numero P_coma |
    Write Identificador Igual Numero P_coma |
    Write Identificador Op_incremento P_coma | 
    Write Op_incremento Identificador P_coma | 
    Bool Identificador P_coma | 
    Bool Identificador Op_atribucion Numero P_coma |
    Bool Identificador Igual Numero P_coma |
    Bool Identificador Op_incremento P_coma | 
    Bool Op_incremento Identificador P_coma | 

    
    Identificador Op_atribucion Numero P_coma |
    Identificador Igual Numero P_coma |
    Identificador Op_incremento P_coma | 
    Identificador Coma Identificador | 

    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma |
    T_dato Identificador Identificador P_coma| 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Identificador Igual Numero Punto Numero P_coma|
    Identificador Igual Identificador Operador Numero P_coma |
    Identificador Igual Identificador Operador Identificador P_coma |
    Identificador Igual Numero Operador Numero P_coma |
    Numero Operador Numero |
    Numero Operador Identificador |
    Identificador Operador Numero |
    Identificador Operador Identificador |
    Identificador Igual Numero Operador DECLARACION P_coma |
    Identificador Igual Identificador Operador DECLARACION P_coma |
    Comentarios Identificador |
    Multi_comentario_a Identificador Multi_comentario_b

;

Operador ::= Suma | Resta | Multiplicacion | Division;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c | 
If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c |
If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c Fi |
If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c Fi |
Do Llave_a SENTENCIA Llave_c Until Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma  
;


FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;