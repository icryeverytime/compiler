
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 16 20:23:14 CDT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 16 20:23:14 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\007\000\002\002\006\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\011\000\002" +
    "\004\011\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\010\000" +
    "\002\004\010\000\002\004\004\000\002\004\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\006\011\000\002\006\012\000\002\006\017" +
    "\000\002\006\013\000\002\006\013\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\007\015\000\002\010" +
    "\011\000\002\011\013\000\002\012\011\000\002\014\012" +
    "\000\002\014\011\000\002\005\005\000\002\005\004\000" +
    "\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\046\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\040\006\024\007\020\011\025\012\026\014\030\015" +
    "\032\016\011\034\021\042\033\044\016\045\012\047\027" +
    "\053\010\054\034\055\022\001\002\000\006\027\355\044" +
    "\354\001\002\000\004\031\321\001\002\000\012\020\261" +
    "\021\263\022\254\023\256\001\002\000\040\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\034\ufff5" +
    "\042\ufff5\044\ufff5\045\ufff5\047\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\001\002\000\040\006\024\007\020\011\025\012\026" +
    "\014\101\015\032\016\011\034\317\042\033\044\016\045" +
    "\012\047\027\053\010\054\034\055\022\001\002\000\040" +
    "\006\ufffb\007\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\034\ufffb\042\ufffb\044\ufffb\045\ufffb\047\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\001\002\000\022\017\262\020\261\021" +
    "\263\022\254\023\256\026\255\027\253\041\260\001\002" +
    "\000\040\006\ufff9\007\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\034\ufff9\042\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\001\002\000\006\027\231\044" +
    "\232\001\002\000\006\002\uffff\046\004\001\002\000\004" +
    "\044\227\001\002\000\040\006\ufff7\007\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\034\ufff7\042\ufff7\044\ufff7" +
    "\045\ufff7\047\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000" +
    "\006\027\211\044\210\001\002\000\004\044\171\001\002" +
    "\000\004\031\145\001\002\000\006\027\130\044\131\001" +
    "\002\000\004\033\125\001\002\000\040\006\ufff2\007\ufff2" +
    "\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\034\ufff2\042" +
    "\ufff2\044\ufff2\045\ufff2\047\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\001\002\000\004\031\054\001\002\000\004\044\052\001" +
    "\002\000\006\027\036\044\035\001\002\000\012\017\044" +
    "\026\041\027\043\040\042\001\002\000\004\044\037\001" +
    "\002\000\004\040\040\001\002\000\042\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\034\uffe6\040" +
    "\uffe6\042\uffe6\044\uffe6\045\uffe6\047\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\001\002\000\004\045\050\001\002\000\042\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea" +
    "\034\uffea\040\uffea\042\uffea\044\uffea\045\uffea\047\uffea\053" +
    "\uffea\054\uffea\055\uffea\001\002\000\004\040\047\001\002" +
    "\000\004\045\045\001\002\000\004\040\046\001\002\000" +
    "\042\006\uffe8\007\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\034\uffe8\040\uffe8\042\uffe8\044\uffe8\045\uffe8\047" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\001\002\000\042\006\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\034" +
    "\uffe7\040\uffe7\042\uffe7\044\uffe7\045\uffe7\047\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\001\002\000\004\040\051\001\002\000" +
    "\042\006\uffe9\007\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\034\uffe9\040\uffe9\042\uffe9\044\uffe9\045\uffe9\047" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002\000\004\043\053" +
    "\001\002\000\042\006\uffc2\007\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\034\uffc2\040\uffc2\042\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\006\030\056\044\057\001\002\000\004\032\070\001\002" +
    "\000\006\032\uffb8\040\uffb8\001\002\000\004\025\060\001" +
    "\002\000\012\005\062\030\063\044\064\045\061\001\002" +
    "\000\006\032\uffb6\040\uffb6\001\002\000\006\005\065\044" +
    "\066\001\002\000\006\032\uffb7\040\uffb7\001\002\000\006" +
    "\032\uffb5\040\uffb5\001\002\000\006\032\uffb4\040\uffb4\001" +
    "\002\000\004\005\067\001\002\000\006\032\uffb3\040\uffb3" +
    "\001\002\000\004\033\071\001\002\000\036\006\024\007" +
    "\020\011\025\012\026\014\030\015\032\016\011\042\033" +
    "\044\016\045\012\047\027\053\010\054\034\055\022\001" +
    "\002\000\040\006\024\007\020\011\025\012\026\014\101" +
    "\015\032\016\011\034\076\042\033\044\016\045\012\047" +
    "\027\053\010\054\034\055\022\001\002\000\040\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\034" +
    "\ufff6\042\ufff6\044\ufff6\045\ufff6\047\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\001\002\000\040\006\ufffc\007\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\034\ufffc\042\ufffc\044\ufffc" +
    "\045\ufffc\047\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002\000" +
    "\040\006\ufffa\007\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\034\ufffa\042\ufffa\044\ufffa\045\ufffa\047\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\001\002\000\040\006\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\034\uffb1\042" +
    "\uffb1\044\uffb1\045\uffb1\047\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\001\002\000\040\006\ufff8\007\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\034\ufff8\042\ufff8\044\ufff8\045\ufff8" +
    "\047\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002\000\004\014" +
    "\120\001\002\000\004\033\103\001\002\000\040\006\ufff3" +
    "\007\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\034" +
    "\ufff3\042\ufff3\044\ufff3\045\ufff3\047\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\001\002\000\036\006\024\007\020\011\025\012" +
    "\026\014\030\015\032\016\011\042\033\044\016\045\012" +
    "\047\027\053\010\054\034\055\022\001\002\000\040\006" +
    "\024\007\020\011\025\012\026\014\101\015\032\016\011" +
    "\034\105\042\033\044\016\045\012\047\027\053\010\054" +
    "\034\055\022\001\002\000\006\015\106\052\107\001\002" +
    "\000\004\031\114\001\002\000\004\031\110\001\002\000" +
    "\006\030\056\044\057\001\002\000\004\032\112\001\002" +
    "\000\004\040\113\001\002\000\040\006\uffb9\007\uffb9\011" +
    "\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\034\uffb9\042\uffb9" +
    "\044\uffb9\045\uffb9\047\uffb9\053\uffb9\054\uffb9\055\uffb9\001" +
    "\002\000\006\030\056\044\057\001\002\000\004\032\116" +
    "\001\002\000\004\040\117\001\002\000\040\006\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\034\uffb0" +
    "\042\uffb0\044\uffb0\045\uffb0\047\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\001\002\000\004\033\122\001\002\000\040\006\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\034" +
    "\ufff4\042\ufff4\044\ufff4\045\ufff4\047\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\001\002\000\036\006\024\007\020\011\025\012" +
    "\026\014\030\015\032\016\011\042\033\044\016\045\012" +
    "\047\027\053\010\054\034\055\022\001\002\000\040\006" +
    "\024\007\020\011\025\012\026\014\101\015\032\016\011" +
    "\034\124\042\033\044\016\045\012\047\027\053\010\054" +
    "\034\055\022\001\002\000\004\015\106\001\002\000\036" +
    "\006\024\007\020\011\025\012\026\014\030\015\032\016" +
    "\011\042\033\044\016\045\012\047\027\053\010\054\034" +
    "\055\022\001\002\000\040\006\024\007\020\011\025\012" +
    "\026\014\101\015\032\016\011\034\127\042\033\044\016" +
    "\045\012\047\027\053\010\054\034\055\022\001\002\000" +
    "\004\052\107\001\002\000\004\044\143\001\002\000\012" +
    "\017\135\026\132\027\134\040\133\001\002\000\004\045" +
    "\141\001\002\000\042\006\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\034\uffe0\040\uffe0\042\uffe0\044" +
    "\uffe0\045\uffe0\047\uffe0\053\uffe0\054\uffe0\055\uffe0\001\002" +
    "\000\004\040\140\001\002\000\004\045\136\001\002\000" +
    "\004\040\137\001\002\000\042\006\uffde\007\uffde\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\016\uffde\034\uffde\040\uffde\042" +
    "\uffde\044\uffde\045\uffde\047\uffde\053\uffde\054\uffde\055\uffde" +
    "\001\002\000\042\006\uffdd\007\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\034\uffdd\040\uffdd\042\uffdd\044\uffdd" +
    "\045\uffdd\047\uffdd\053\uffdd\054\uffdd\055\uffdd\001\002\000" +
    "\004\040\142\001\002\000\042\006\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\014\uffdf\015\uffdf\016\uffdf\034\uffdf\040\uffdf\042" +
    "\uffdf\044\uffdf\045\uffdf\047\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\001\002\000\004\040\144\001\002\000\042\006\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\034\uffdc" +
    "\040\uffdc\042\uffdc\044\uffdc\045\uffdc\047\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\001\002\000\006\030\056\044\057\001\002" +
    "\000\004\032\147\001\002\000\006\033\150\051\151\001" +
    "\002\000\036\006\024\007\020\011\025\012\026\014\030" +
    "\015\032\016\011\042\033\044\016\045\012\047\027\053" +
    "\010\054\034\055\022\001\002\000\004\033\152\001\002" +
    "\000\036\006\024\007\020\011\025\012\026\014\030\015" +
    "\032\016\011\042\033\044\016\045\012\047\027\053\010" +
    "\054\034\055\022\001\002\000\040\006\024\007\020\011" +
    "\025\012\026\014\101\015\032\016\011\034\154\042\033" +
    "\044\016\045\012\047\027\053\010\054\034\055\022\001" +
    "\002\000\044\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\156" +
    "\014\uffbc\015\uffbc\016\uffbc\034\uffbc\042\uffbc\044\uffbc\045" +
    "\uffbc\047\uffbc\050\155\053\uffbc\054\uffbc\055\uffbc\001\002" +
    "\000\040\006\uffba\007\uffba\011\uffba\012\uffba\014\uffba\015" +
    "\uffba\016\uffba\034\uffba\042\uffba\044\uffba\045\uffba\047\uffba" +
    "\053\uffba\054\uffba\055\uffba\001\002\000\004\033\157\001" +
    "\002\000\036\006\024\007\020\011\025\012\026\014\030" +
    "\015\032\016\011\042\033\044\016\045\012\047\027\053" +
    "\010\054\034\055\022\001\002\000\040\006\024\007\020" +
    "\011\025\012\026\014\101\015\032\016\011\034\161\042" +
    "\033\044\016\045\012\047\027\053\010\054\034\055\022" +
    "\001\002\000\004\050\162\001\002\000\040\006\uffbb\007" +
    "\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\034\uffbb" +
    "\042\uffbb\044\uffbb\045\uffbb\047\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\001\002\000\040\006\024\007\020\011\025\012\026" +
    "\014\101\015\032\016\011\034\164\042\033\044\016\045" +
    "\012\047\027\053\010\054\034\055\022\001\002\000\042" +
    "\006\uffbd\007\uffbd\011\uffbd\012\uffbd\013\165\014\uffbd\015" +
    "\uffbd\016\uffbd\034\uffbd\042\uffbd\044\uffbd\045\uffbd\047\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\001\002\000\004\033\166\001" +
    "\002\000\036\006\024\007\020\011\025\012\026\014\030" +
    "\015\032\016\011\042\033\044\016\045\012\047\027\053" +
    "\010\054\034\055\022\001\002\000\040\006\024\007\020" +
    "\011\025\012\026\014\101\015\032\016\011\034\170\042" +
    "\033\044\016\045\012\047\027\053\010\054\034\055\022" +
    "\001\002\000\040\006\uffb2\007\uffb2\011\uffb2\012\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\034\uffb2\042\uffb2\044\uffb2\045\uffb2" +
    "\047\uffb2\053\uffb2\054\uffb2\055\uffb2\001\002\000\006\017" +
    "\173\026\172\001\002\000\004\005\202\001\002\000\004" +
    "\005\174\001\002\000\006\005\175\044\176\001\002\000" +
    "\004\040\201\001\002\000\004\005\177\001\002\000\004" +
    "\040\200\001\002\000\042\006\uffce\007\uffce\011\uffce\012" +
    "\uffce\014\uffce\015\uffce\016\uffce\034\uffce\040\uffce\042\uffce" +
    "\044\uffce\045\uffce\047\uffce\053\uffce\054\uffce\055\uffce\001" +
    "\002\000\042\006\uffd0\007\uffd0\011\uffd0\012\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\034\uffd0\040\uffd0\042\uffd0\044\uffd0\045" +
    "\uffd0\047\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\006" +
    "\005\203\044\204\001\002\000\004\040\207\001\002\000" +
    "\004\005\205\001\002\000\004\040\206\001\002\000\042" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\034\uffcf\040\uffcf\042\uffcf\044\uffcf\045\uffcf\047\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\001\002\000\042\006\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\034\uffd1" +
    "\040\uffd1\042\uffd1\044\uffd1\045\uffd1\047\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\001\002\000\014\017\220\026\214\027\217" +
    "\040\215\044\216\001\002\000\004\044\212\001\002\000" +
    "\004\040\213\001\002\000\042\006\uffd3\007\uffd3\011\uffd3" +
    "\012\uffd3\014\uffd3\015\uffd3\016\uffd3\034\uffd3\040\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\047\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\001\002\000\004\045\225\001\002\000\042\006\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\034\uffd7" +
    "\040\uffd7\042\uffd7\044\uffd7\045\uffd7\047\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\001\002\000\004\040\224\001\002\000\004" +
    "\040\223\001\002\000\004\045\221\001\002\000\004\040" +
    "\222\001\002\000\042\006\uffd5\007\uffd5\011\uffd5\012\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\034\uffd5\040\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\047\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002" +
    "\000\042\006\uffd4\007\uffd4\011\uffd4\012\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\034\uffd4\040\uffd4\042\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000\042\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\034\uffd2\040\uffd2\042\uffd2\044\uffd2\045\uffd2\047\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\001\002\000\004\040\226\001\002" +
    "\000\042\006\uffd6\007\uffd6\011\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\034\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\053\uffd6\054\uffd6\055\uffd6\001\002\000\042\006" +
    "\uffc3\007\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\034\uffc3\040\uffc3\042\uffc3\044\uffc3\045\uffc3\047\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\001\002\000\004\002\ufffd\001\002" +
    "\000\004\044\251\001\002\000\016\017\240\026\233\027" +
    "\236\040\234\041\235\044\237\001\002\000\004\045\247" +
    "\001\002\000\042\006\ufff1\007\ufff1\011\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\034\ufff1\040\ufff1\042\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\053\ufff1\054\ufff1\055\ufff1\001\002\000" +
    "\004\044\245\001\002\000\004\040\244\001\002\000\004" +
    "\040\243\001\002\000\004\045\241\001\002\000\004\040" +
    "\242\001\002\000\042\006\uffef\007\uffef\011\uffef\012\uffef" +
    "\014\uffef\015\uffef\016\uffef\034\uffef\040\uffef\042\uffef\044" +
    "\uffef\045\uffef\047\uffef\053\uffef\054\uffef\055\uffef\001\002" +
    "\000\042\006\uffeb\007\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\034\uffeb\040\uffeb\042\uffeb\044\uffeb\045\uffeb" +
    "\047\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002\000\042\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee" +
    "\034\uffee\040\uffee\042\uffee\044\uffee\045\uffee\047\uffee\053" +
    "\uffee\054\uffee\055\uffee\001\002\000\004\040\246\001\002" +
    "\000\042\006\uffec\007\uffec\011\uffec\012\uffec\014\uffec\015" +
    "\uffec\016\uffec\034\uffec\040\uffec\042\uffec\044\uffec\045\uffec" +
    "\047\uffec\053\uffec\054\uffec\055\uffec\001\002\000\004\040" +
    "\250\001\002\000\042\006\ufff0\007\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\034\ufff0\040\ufff0\042\ufff0\044" +
    "\ufff0\045\ufff0\047\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002" +
    "\000\004\040\252\001\002\000\042\006\uffed\007\uffed\011" +
    "\uffed\012\uffed\014\uffed\015\uffed\016\uffed\034\uffed\040\uffed" +
    "\042\uffed\044\uffed\045\uffed\047\uffed\053\uffed\054\uffed\055" +
    "\uffed\001\002\000\004\040\316\001\002\000\026\006\uffbf" +
    "\007\uffbf\011\uffbf\042\uffbf\044\uffbf\045\uffbf\047\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\001\002\000\004\045\314\001\002" +
    "\000\026\006\uffbe\007\uffbe\011\uffbe\042\uffbe\044\uffbe\045" +
    "\uffbe\047\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000\006" +
    "\044\313\045\312\001\002\000\004\044\311\001\002\000" +
    "\026\006\uffc1\007\uffc1\011\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\047\uffc1\053\uffc1\054\uffc1\055\uffc1\001\002\000\006\044" +
    "\265\045\264\001\002\000\026\006\uffc0\007\uffc0\011\uffc0" +
    "\042\uffc0\044\uffc0\045\uffc0\047\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\001\002\000\016\010\302\020\261\021\263\022\254" +
    "\023\256\040\301\001\002\000\012\020\261\021\263\022" +
    "\254\023\256\001\002\000\026\006\024\007\020\011\025" +
    "\042\033\044\270\045\271\047\027\053\010\054\034\055" +
    "\022\001\002\000\004\040\277\001\002\000\024\017\262" +
    "\020\261\021\263\022\254\023\256\026\255\027\253\040" +
    "\276\041\260\001\002\000\014\020\261\021\263\022\254" +
    "\023\256\040\273\001\002\000\006\044\275\045\274\001" +
    "\002\000\042\006\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\034\uffcc\040\uffcc\042\uffcc\044\uffcc\045" +
    "\uffcc\047\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002\000\042" +
    "\006\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\034\uffc9\040\uffc9\042\uffc9\044\uffc9\045\uffc9\047\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\001\002\000\042\006\uffc8\007" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\034\uffc8" +
    "\040\uffc8\042\uffc8\044\uffc8\045\uffc8\047\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\001\002\000\042\006\uffcb\007\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\034\uffcb\040\uffcb\042" +
    "\uffcb\044\uffcb\045\uffcb\047\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\001\002\000\042\006\uffc4\007\uffc4\011\uffc4\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\034\uffc4\040\uffc4\042\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\053\uffc4\054\uffc4\055\uffc4\001\002\000" +
    "\026\006\024\007\020\011\025\042\033\044\016\045\306" +
    "\047\027\053\010\054\034\055\022\001\002\000\042\006" +
    "\uffda\007\uffda\011\uffda\012\uffda\014\uffda\015\uffda\016\uffda" +
    "\034\uffda\040\uffda\042\uffda\044\uffda\045\uffda\047\uffda\053" +
    "\uffda\054\uffda\055\uffda\001\002\000\004\045\303\001\002" +
    "\000\004\040\304\001\002\000\042\006\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\034\uffcd\040\uffcd" +
    "\042\uffcd\044\uffcd\045\uffcd\047\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\004\040\310\001\002\000\014\020\261" +
    "\021\263\022\254\023\256\040\307\001\002\000\042\006" +
    "\uffca\007\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca" +
    "\034\uffca\040\uffca\042\uffca\044\uffca\045\uffca\047\uffca\053" +
    "\uffca\054\uffca\055\uffca\001\002\000\042\006\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\034\uffc5\040" +
    "\uffc5\042\uffc5\044\uffc5\045\uffc5\047\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\001\002\000\042\006\uffd8\007\uffd8\011\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\034\uffd8\040\uffd8\042\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\053\uffd8\054\uffd8\055\uffd8\001" +
    "\002\000\042\006\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\034\uffc7\040\uffc7\042\uffc7\044\uffc7\045" +
    "\uffc7\047\uffc7\053\uffc7\054\uffc7\055\uffc7\001\002\000\042" +
    "\006\uffc6\007\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\034\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\001\002\000\004\040\315\001" +
    "\002\000\042\006\uffdb\007\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\034\uffdb\040\uffdb\042\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\042" +
    "\006\uffd9\007\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\034\uffd9\040\uffd9\042\uffd9\044\uffd9\045\uffd9\047\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\001\002\000\006\002\000\046" +
    "\004\001\002\000\004\002\ufffe\001\002\000\006\006\323" +
    "\044\324\001\002\000\004\032\350\001\002\000\004\044" +
    "\341\001\002\000\004\017\325\001\002\000\004\045\326" +
    "\001\002\000\004\040\327\001\002\000\006\030\056\044" +
    "\057\001\002\000\004\040\331\001\002\000\006\027\333" +
    "\044\334\001\002\000\004\032\uffad\001\002\000\004\044" +
    "\340\001\002\000\006\026\335\027\336\001\002\000\004" +
    "\045\337\001\002\000\004\032\uffab\001\002\000\004\032" +
    "\uffac\001\002\000\004\032\uffaa\001\002\000\004\017\342" +
    "\001\002\000\004\045\343\001\002\000\004\040\344\001" +
    "\002\000\006\030\056\044\057\001\002\000\004\040\346" +
    "\001\002\000\006\027\333\044\334\001\002\000\004\032" +
    "\uffae\001\002\000\004\033\351\001\002\000\036\006\024" +
    "\007\020\011\025\012\026\014\030\015\032\016\011\042" +
    "\033\044\016\045\012\047\027\053\010\054\034\055\022" +
    "\001\002\000\040\006\024\007\020\011\025\012\026\014" +
    "\101\015\032\016\011\034\353\042\033\044\016\045\012" +
    "\047\027\053\010\054\034\055\022\001\002\000\040\006" +
    "\uffaf\007\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\034\uffaf\042\uffaf\044\uffaf\045\uffaf\047\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\001\002\000\012\017\363\026\360\027\362" +
    "\040\361\001\002\000\004\044\356\001\002\000\004\040" +
    "\357\001\002\000\042\006\uffe1\007\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\034\uffe1\040\uffe1\042\uffe1\044" +
    "\uffe1\045\uffe1\047\uffe1\053\uffe1\054\uffe1\055\uffe1\001\002" +
    "\000\004\045\367\001\002\000\042\006\uffe5\007\uffe5\011" +
    "\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\034\uffe5\040\uffe5" +
    "\042\uffe5\044\uffe5\045\uffe5\047\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\001\002\000\004\040\366\001\002\000\004\045\364" +
    "\001\002\000\004\040\365\001\002\000\042\006\uffe3\007" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\034\uffe3" +
    "\040\uffe3\042\uffe3\044\uffe3\045\uffe3\047\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\001\002\000\042\006\uffe2\007\uffe2\011\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\016\uffe2\034\uffe2\040\uffe2\042" +
    "\uffe2\044\uffe2\045\uffe2\047\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\001\002\000\004\040\370\001\002\000\042\006\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\034\uffe4" +
    "\040\uffe4\042\uffe4\044\uffe4\045\uffe4\047\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\013\004\014" +
    "\006\016\007\022\010\012\012\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\271\001\001\000\002" +
    "\001\001\000\016\004\073\006\074\007\076\010\072\011" +
    "\077\012\101\001\001\000\002\001\001\000\004\015\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\071\004\014\006\016" +
    "\007\022\010\012\012\030\001\001\000\016\004\073\006" +
    "\074\007\076\010\072\011\077\012\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\103\004\014\006" +
    "\016\007\022\010\012\012\030\001\001\000\016\004\073" +
    "\006\074\007\076\010\072\011\077\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\122\004\014\006\016\007\022" +
    "\010\012\012\030\001\001\000\016\004\073\006\074\007" +
    "\076\010\072\011\077\012\101\001\001\000\002\001\001" +
    "\000\016\003\125\004\014\006\016\007\022\010\012\012" +
    "\030\001\001\000\016\004\073\006\074\007\076\010\072" +
    "\011\077\012\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\162\004\014\006\016\007\022\010\012\012\030\001" +
    "\001\000\002\001\001\000\016\003\152\004\014\006\016" +
    "\007\022\010\012\012\030\001\001\000\016\004\073\006" +
    "\074\007\076\010\072\011\077\012\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\157\004\014\006\016\007\022\010\012\012\030\001\001" +
    "\000\016\004\073\006\074\007\076\010\072\011\077\012" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\073\006\074\007\076\010\072\011\077\012\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\166" +
    "\004\014\006\016\007\022\010\012\012\030\001\001\000" +
    "\016\004\073\006\074\007\076\010\072\011\077\012\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\277\001" +
    "\001\000\004\015\265\001\001\000\004\004\266\001\001" +
    "\000\002\001\001\000\004\015\256\001\001\000\004\015" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\317\001\001\000\002\001\001\000\004\014" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\327\001\001\000\002\001\001\000\004\005\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\344\001\001\000\002\001\001\000\004" +
    "\005\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\351\004\014\006\016\007\022\010\012\012\030" +
    "\001\001\000\016\004\073\006\074\007\076\010\072\011" +
    "\077\012\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= Do Llave_a SENTENCIA Llave_c Until Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c Fi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c Fi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operador",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operador",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operador",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Operador",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Multi_comentario_a Identificador Multi_comentario_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Comentarios Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Identificador Igual Identificador Operador DECLARACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Identificador Igual Numero Operador DECLARACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificador Operador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Identificador Operador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Numero Operador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Numero Operador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador Igual Numero Operador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador Igual Identificador Operador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Identificador Igual Identificador Operador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_dato Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Identificador Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Bool Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Bool Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Bool Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Bool Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Write Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Write Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Write Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Write Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Write Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Read Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Read Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Read Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Read Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Read Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Coma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Program Llave_a Llave_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Program Llave_a SENTENCIA Llave_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Program Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

